/* Copyright (c) 2007-2015 MIT 6.005 course staff, all rights reserved.
 * Redistribution of original or derived work requires permission of course staff.
 */
package turtle;

import java.util.List;
import java.util.ArrayList;

public class TurtleSoup {

    /**
     * Draw a square.
     * 
     * @param turtle the turtle context
     * @param sideLength length of each side
     */
    public static void drawSquare(Turtle turtle, int sideLength) {
        final int numberOfSides = 4;
        final double totalAngle = 360;
        final double rotationAngle = totalAngle / numberOfSides;
        
        for(int i = 1; i <= numberOfSides; i++){
            
            turtle.forward(sideLength);
            turtle.turn(rotationAngle);
        }
    }

    /**
     * Determine inside angles of a regular polygon.
     * 
     * There is a simple formula for calculating the inside angles of a polygon;
     * you should derive it and use it here.
     * 
     * @param sides number of sides, where sides must be > 2
     * @return angle in degrees, where 0 <= angle < 360
     */
    public static double calculateRegularPolygonAngle(int sides) {
        //This name comes from the proof of the formula
        //For the sum of angles in an n-polygon
        //See this link : http://www.geom.uiuc.edu/~dwiggins/conj07.html
        final double degreesInTriangle = 180;
        
        return degreesInTriangle * (sides-2) / sides;
    }

    /**
     * Determine number of sides given the size of interior angles of a regular polygon.
     * 
     * There is a simple formula for this; you should derive it and use it here.
     * Make sure you *properly round* the answer before you return it (see java.lang.Math).
     * HINT: it is easier if you think about the exterior angles.
     * 
     * @param angle size of interior angles in degrees
     * @return the integer number of sides
     */
    public static int calculatePolygonSidesFromAngle(double angle) {
        final double degreesInTriangle = 180;
        double fractionValue = angle / degreesInTriangle; //this fraction is (numberOfSides - 2) / numberOfSides
        
        //Bunch of operations to get the desired number of sides
        double inverseOfNumberOfSides = (1 - fractionValue) / 2;
        int numberOfSides = (int) Math.round(1 / inverseOfNumberOfSides);
        
        return numberOfSides;
        
        
    }

    /**
     * Given the number of sides, draw a regular polygon.
     * 
     * (0,0) is the lower-left corner of the polygon; use only right-hand turns to draw.
     * 
     * @param turtle the turtle context
     * @param sides number of sides of the polygon to draw
     * @param sideLength length of each side
     */
    public static void drawRegularPolygon(Turtle turtle, int sides, int sideLength) {
        
        final double halfTotalAngle = 180;
        double rotationAngle = halfTotalAngle - calculateRegularPolygonAngle(sides);
        
        for(int i = 1; i <= sides; i++){
            
            turtle.forward(sideLength);
            turtle.turn(rotationAngle);
        }
    }

    /**
     * Given the current direction, current location, and a target location, calculate the heading
     * towards the target point.
     * 
     * The return value is the angle input to turn() that would point the turtle in the direction of
     * the target point (targetX,targetY), given that the turtle is already at the point
     * (currentX,currentY) and is facing at angle currentHeading. The angle must be expressed in
     * degrees, where 0 <= angle < 360. 
     *
     * HINT: look at http://en.wikipedia.org/wiki/Atan2 and Java's math libraries
     * 
     * @param currentHeading current direction as clockwise from north
     * @param currentX current location x-coordinate
     * @param currentY current location y-coordinate
     * @param targetX target point x-coordinate
     * @param targetY target point y-coordinate
     * @return adjustment to heading (right turn amount) to get to target point,
     *         must be 0 <= angle < 360.
     */
    public static double calculateHeadingToPoint(double currentHeading, int currentX, int currentY,
                                                 int targetX, int targetY) {
        double angleFromNorthCounterclockwise = Math.atan2(currentX - targetX, targetY - currentY); //angle from north of the line connecting the two points
        double angleFromNorthInDegreesClockwise =  - Math.toDegrees(angleFromNorthCounterclockwise);
        double headerAngle = angleFromNorthInDegreesClockwise - currentHeading;
        
        final int degreesInCircle = 360;
        while (headerAngle < 0){
            headerAngle += degreesInCircle;
        }
        
        return headerAngle;
        
        
    }

    /**
     * Given a sequence of points, calculate the heading adjustments needed to get from each point
     * to the next.
     * 
     * Assumes that the turtle starts at the first point given, facing up (i.e. 0 degrees).
     * For each subsequent point, assumes that the turtle is still facing in the direction it was
     * facing when it moved to the previous point.
     * You should use calculateHeadingToPoint() to implement this function.
     * 
     * @param xCoords list of x-coordinates (must be same length as yCoords)
     * @param yCoords list of y-coordinates (must be same length as xCoords)
     * @return list of heading adjustments between points, of size (# of points) - 1.
     */
    public static List<Double> calculateHeadings(List<Integer> xCoords, List<Integer> yCoords) {
        List<Double> headerAngles = new ArrayList<>();
        
        final int degreesInCircle = 360;
        double currentHeader = 0;
        double rotationAngle;
        int currentX = xCoords.get(0);
        int currentY = yCoords.get(0);
        
        int targetX;
        int targetY;
        
        for(int index = 1; index < xCoords.size(); index++){
            
            targetX = xCoords.get(index);
            targetY = yCoords.get(index);
            
            rotationAngle = calculateHeadingToPoint(currentHeader, currentX, currentY, targetX, targetY);
            
            headerAngles.add(rotationAngle);
            
            currentHeader = currentHeader + rotationAngle;
            
            currentHeader = currentHeader % degreesInCircle;
            
            currentX = targetX;
            currentY = targetY;
            
        }
        
        return headerAngles;
    }

    /**
     * Draw your personal, custom art.
     * 
     * Many interesting images can be drawn using the simple implementation of a turtle.  For this
     * function, draw something interesting; the complexity can be as little or as much as you want.
     * We'll be peer-voting on the different images, and the highest-rated one will win a prize. 
     * 
     * This program draws a bunch of concentric circles with
     * various colors
     * @param turtle the turtle context
     */
    public static void drawPersonalArt(Turtle turtle) {
        
        final int rightTurnDegrees = 90;
        final int leftTurnDegrees = 270;
        final int displacement = 180;
        
        PenColor[] colors = {PenColor.BLACK,
                PenColor.GRAY,
                PenColor.RED,
                PenColor.PINK,
                PenColor.ORANGE,
                PenColor.YELLOW,
                PenColor.GREEN,
                PenColor.CYAN,
                PenColor.BLUE,
                PenColor.MAGENTA};
        
        
        
        
        //these four commands place the turtle in a more convenient spot, while still facing north
        turtle.color(colors[5]);             //yellow, so that it is not too apparent
        turtle.turn(leftTurnDegrees);
        turtle.forward(displacement);
        turtle.turn(rightTurnDegrees);
        
        int noOfSides = 135;                                    //this should be big enough so that a regular polygon with this many sides looks like a circle
        int distanceBetweenCircles = (int) Math.floor(noOfSides / (2 * Math.PI));    //distance between circles so that they are (almost) concentric
        
        int noOfCircles = 10;
        for(int i=noOfCircles ; i>=1; i--){
            turtle.color(colors[i-1]);
            drawRegularPolygon(turtle,noOfSides,i);
            
            //move turtle to the starting position of the next circle; only if berfore last step
            if (i > 1){
                turtle.color(colors[5]);
                turtle.turn(rightTurnDegrees);
                turtle.forward(distanceBetweenCircles);
                turtle.turn(leftTurnDegrees);
            }
            
        }
    }

    /**
     * Main method.
     * 
     * This is the method that runs when you run "java TurtleSoup".
     * 
     * @param args unused
     */
    public static void main(String args[]) {
        DrawableTurtle turtle = new DrawableTurtle();
        
        drawPersonalArt(turtle);
        
        // draw the window
        turtle.draw();
    }

}
